var braille_descr_dic = {
    '': '⠀',
    '1': '⠁',
    '2': '⠂',
    '12': '⠃',
    '3': '⠄',
    '13': '⠅',
    '23': '⠆',
    '123': '⠇',
    '4': '⠈',
    '14': '⠉',
    '24': '⠊',
    '124': '⠋',
    '34': '⠌',
    '134': '⠍',
    '234': '⠎',
    '1234': '⠏',
    '5': '⠐',
    '15': '⠑',
    '25': '⠒',
    '125': '⠓',
    '35': '⠔',
    '135': '⠕',
    '235': '⠖',
    '1235': '⠗',
    '45': '⠘',
    '145': '⠙',
    '245': '⠚',
    '1245': '⠛',
    '345': '⠜',
    '1345': '⠝',
    '2345': '⠞',
    '12345': '⠟',
    '6': '⠠',
    '16': '⠡',
    '26': '⠢',
    '126': '⠣',
    '36': '⠤',
    '136': '⠥',
    '236': '⠦',
    '1236': '⠧',
    '46': '⠨',
    '146': '⠩',
    '246': '⠪',
    '1246': '⠫',
    '346': '⠬',
    '1346': '⠭',
    '2346': '⠮',
    '12346': '⠯',
    '56': '⠰',
    '156': '⠱',
    '256': '⠲',
    '1256': '⠳',
    '356': '⠴',
    '1356': '⠵',
    '2356': '⠶',
    '12356': '⠷',
    '456': '⠸',
    '1456': '⠹',
    '2456': '⠺',
    '12456': '⠻',
    '3456': '⠼',
    '13456': '⠽',
    '23456': '⠾',
    '123456': '⠿',
    '7': '⡀',
    '17': '⡁',
    '27': '⡂',
    '127': '⡃',
    '37': '⡄',
    '137': '⡅',
    '237': '⡆',
    '1237': '⡇',
    '47': '⡈',
    '147': '⡉',
    '247': '⡊',
    '1247': '⡋',
    '347': '⡌',
    '1347': '⡍',
    '2347': '⡎',
    '12347': '⡏',
    '57': '⡐',
    '157': '⡑',
    '257': '⡒',
    '1257': '⡓',
    '357': '⡔',
    '1357': '⡕',
    '2357': '⡖',
    '12357': '⡗',
    '457': '⡘',
    '1457': '⡙',
    '2457': '⡚',
    '12457': '⡛',
    '3457': '⡜',
    '13457': '⡝',
    '23457': '⡞',
    '123457': '⡟',
    '67': '⡠',
    '167': '⡡',
    '267': '⡢',
    '1267': '⡣',
    '367': '⡤',
    '1367': '⡥',
    '2367': '⡦',
    '12367': '⡧',
    '467': '⡨',
    '1467': '⡩',
    '2467': '⡪',
    '12467': '⡫',
    '3467': '⡬',
    '13467': '⡭',
    '23467': '⡮',
    '123467': '⡯',
    '567': '⡰',
    '1567': '⡱',
    '2567': '⡲',
    '12567': '⡳',
    '3567': '⡴',
    '13567': '⡵',
    '23567': '⡶',
    '123567': '⡷',
    '4567': '⡸',
    '14567': '⡹',
    '24567': '⡺',
    '124567': '⡻',
    '34567': '⡼',
    '134567': '⡽',
    '234567': '⡾',
    '1234567': '⡿',
    '8': '⢀',
    '18': '⢁',
    '28': '⢂',
    '128': '⢃',
    '38': '⢄',
    '138': '⢅',
    '238': '⢆',
    '1238': '⢇',
    '48': '⢈',
    '148': '⢉',
    '248': '⢊',
    '1248': '⢋',
    '348': '⢌',
    '1348': '⢍',
    '2348': '⢎',
    '12348': '⢏',
    '58': '⢐',
    '158': '⢑',
    '258': '⢒',
    '1258': '⢓',
    '358': '⢔',
    '1358': '⢕',
    '2358': '⢖',
    '12358': '⢗',
    '458': '⢘',
    '1458': '⢙',
    '2458': '⢚',
    '12458': '⢛',
    '3458': '⢜',
    '13458': '⢝',
    '23458': '⢞',
    '123458': '⢟',
    '68': '⢠',
    '168': '⢡',
    '268': '⢢',
    '1268': '⢣',
    '368': '⢤',
    '1368': '⢥',
    '2368': '⢦',
    '12368': '⢧',
    '468': '⢨',
    '1468': '⢩',
    '2468': '⢪',
    '12468': '⢫',
    '3468': '⢬',
    '13468': '⢭',
    '23468': '⢮',
    '123468': '⢯',
    '568': '⢰',
    '1568': '⢱',
    '2568': '⢲',
    '12568': '⢳',
    '3568': '⢴',
    '13568': '⢵',
    '23568': '⢶',
    '123568': '⢷',
    '4568': '⢸',
    '14568': '⢹',
    '24568': '⢺',
    '124568': '⢻',
    '34568': '⢼',
    '134568': '⢽',
    '234568': '⢾',
    '1234568': '⢿',
    '78': '⣀',
    '178': '⣁',
    '278': '⣂',
    '1278': '⣃',
    '378': '⣄',
    '1378': '⣅',
    '2378': '⣆',
    '12378': '⣇',
    '478': '⣈',
    '1478': '⣉',
    '2478': '⣊',
    '12478': '⣋',
    '3478': '⣌',
    '13478': '⣍',
    '23478': '⣎',
    '123478': '⣏',
    '578': '⣐',
    '1578': '⣑',
    '2578': '⣒',
    '12578': '⣓',
    '3578': '⣔',
    '13578': '⣕',
    '23578': '⣖',
    '123578': '⣗',
    '4578': '⣘',
    '14578': '⣙',
    '24578': '⣚',
    '124578': '⣛',
    '34578': '⣜',
    '134578': '⣝',
    '234578': '⣞',
    '1234578': '⣟',
    '678': '⣠',
    '1678': '⣡',
    '2678': '⣢',
    '12678': '⣣',
    '3678': '⣤',
    '13678': '⣥',
    '23678': '⣦',
    '123678': '⣧',
    '4678': '⣨',
    '14678': '⣩',
    '24678': '⣪',
    '124678': '⣫',
    '34678': '⣬',
    '134678': '⣭',
    '234678': '⣮',
    '1234678': '⣯',
    '5678': '⣰',
    '15678': '⣱',
    '25678': '⣲',
    '125678': '⣳',
    '35678': '⣴',
    '135678': '⣵',
    '235678': '⣶',
    '1235678': '⣷',
    '45678': '⣸',
    '145678': '⣹',
    '245678': '⣺',
    '1245678': '⣻',
    '345678': '⣼',
    '1345678': '⣽',
    '2345678': '⣾',
    '12345678': '⣿'
};


function create_turn90_dic() {
    let upper_dic_90 = {
        '1': '4',
        '2': '1',
        '4': '5',
        '5': '2',
        '3': '4',
        '6': '5',
        '7': '1',
        '8': '2'
    };

    let lower_dic_90 = {
        '1': '6',
        '2': '3',
        '4': '8',
        '5': '7',
        '3': '6',
        '6': '8',
        '7': '3',
        '8': '7'
    };

    let remove_list_upper = ['3', '6', '7', '8'];
    let remove_list_lower = ['1', '2', '4', '5'];

    let result_dic = {};
    for (const key_left of Object.keys(braille_descr_dic)) {
        for (const key_right of Object.keys(braille_descr_dic)) {
            function create_braille_part(remove_list) {
                let upper_part = key_left;
                let lower_part = key_right;
                for (j = 0; j < 4; j++) {
                    upper_part = upper_part.replace(remove_list[j], '');
                    lower_part = lower_part.replace(remove_list[j], '');
                }

                function use_dic(dic, part_str) {
                    let new_str = "";
                    for (k = 0; k < part_str.length; k++) {
                        new_str += dic[part_str[k]];
                    }
                    return new_str;
                }

                new_upper_part = use_dic(upper_dic_90, upper_part);
                new_lower_part = use_dic(lower_dic_90, lower_part);

                let braille_part = (new_upper_part + new_lower_part).split("").map(Number);
                braille_part.sort((a, b) => (a - b));
                return braille_part.join('');
            }

            let part_right = create_braille_part(remove_list_upper);
            let part_left = create_braille_part(remove_list_lower);

            result_dic[braille_descr_dic[key_left] + braille_descr_dic[key_right]] = braille_descr_dic[part_left] + braille_descr_dic[part_right];
        }
    }
    return result_dic;
}


function create_invert_dic() {
    let result_dic = {};
    let braille_descr_elem_nmbrs = Array.from(Array(8), (_, x) => (x + 1).toString());
    for (const key of Object.keys(braille_descr_dic)) {
        let inverted_char = '';
        for (const nmbr of braille_descr_elem_nmbrs) {
            if (!key.includes(nmbr)) {
                inverted_char += nmbr;
            }
        }
        result_dic[braille_descr_dic[key]] = braille_descr_dic[inverted_char];
    }
    return result_dic;
}


function create_mirror_dic() {
    let mirrored_values_dic = {
        '1': '4',
        '2': '5',
        '3': '6',
        '4': '1',
        '5': '2',
        '6': '3',
        '7': '8',
        '8': '7'
    };

    let result_dic = {};
    for (const key of Object.keys(braille_descr_dic)) {
        let mirrored_key = '';
        for (i = 0; i < key.length; i++) {
            mirrored_key += mirrored_values_dic[key[i]];
        }
        mirrored_key = mirrored_key.split("").map(Number).sort((a, b) => (a - b));
        result_dic[braille_descr_dic[key]] = braille_descr_dic[mirrored_key.join('')];
    }
    return result_dic;
}
